5. Simulate Bankers Algorithm for Dead Lock Avoidance

#include<stdio.h>
#include<conio.h>
int max[100][100],alloc[100][100],need[100][100],avail[100];
int n,r;
void input();
void show();
void cal();
int main()
{
 int i,j;
 printf("********** Banker's Algorithm ************\n");
 input();
 show();
 cal();
 getch();
 return 0;
}
void input()
{
 int i,j;
 printf("Enter the no of Processes\t");
 scanf("%d",&n);
 printf("Enter the no of resources instances\t");
 scanf("%d",&r);
 printf("Enter the Max Matrix\n");
 	for(i=0;i<n;i++)
 	{
 		 for(j=0;j<r;j++)
  		{
  		 scanf("%d",&max[i][j]);
  		}
 }
 printf("Enter the Allocation Matrix\n");
 	for(i=0;i<n;i++)
 	{
  for(j=0;j<r;j++)
  		{
  		 scanf("%d",&alloc[i][j]);
  		}
 }
 printf("Enter the available Resources\n");
 for(j=0;j<r;j++)
 {
 		 scanf("%d",&avail[j]);
 	}
}
void show()
{
 int i,j;
 printf("Process\t Allocation\t Max\t Available\t");
 for(i=0;i<n;i++)
 	{
 		 printf("\nP%d\t   ",i+1);
  		for(j=0;j<r;j++)
  		{
  		 printf("%d ",alloc[i][j]);
 		 }
 		 printf("\t");
 			 for(j=0;j<r;j++)
  			{
   			printf("%d ",max[i][j]);
  			}
 			 printf("\t");
  if(i==0)
  			{
  				 for(j=0;j<r;j++)
   					printf("%d ",avail[j]);
 			 }
 	}
}
void cal()
{
 int finish[100],temp,need[100][100],flag=1,k,c1=0;
 int safe[100];
 int i,j;
 	 for(i=0;i<n;i++)
 	 {
  		 finish[i]=0;
 	 }
 //find need matrix
  	for(i=0;i<n;i++)
  	{
  		for(j=0;j<r;j++)
  		{
   		need[i][j]=max[i][j]-alloc[i][j];
 		 }
  	}
 printf("\n");
 	while(flag)
 		{
 		 flag=0;
   		 for(i=0;i<n;i++)
  		{
   			int c=0;
  			for(j=0;j<r;j++)
   			{
    			if((finish[i]==0)&&(need[i][j]<=avail[j]))
   				 {
      			  		 c++;
    					 if(c==r)
    					 {
     					 	for(k=0;k<r;k++)
     					 	{
     					 	 avail[k]+=alloc[i][j];
      					 	finish[i]=1;
     				 		 flag=1;
     				 		  }
    			   			printf("P%d->",i);
    			  			 if(finish[i]==1)
     					 	{
      					 	 i=n;
      					 	}
    					}
    				}
  			 }
 		}
}
 		 for(i=0;i<n;i++)
  {
  if(finish[i]==1)
 				 {
  					 c1++;
 				 }
 				 else
  				{
   					printf("P%d->",i);
 				 }
 }
 if(c1==n)
 	{
 		 printf("\n The system is in safe state");
 	}
else
 	{
  		printf("\n Process are in dead lock");
 		printf("\n System is in unsafe state");
 	}
}




 


deadlock prevention
#include<stdio.h>
#include<conio.h>
int max[10][10],alloc[10][10],need[10][10],avail[10],i,j,p,r,finish[10]={0},flag=0;
main( )
{

printf("\n\nSIMULATION OF DEADLOCK PREVENTION");
printf("Enter no. of processes, resources");
scanf("%d%d",&p,&r);
printf("Enter allocation matrix");
for(i=0;i<p;i++)
  for(j=0;j<r;j++)
     scanf("%d",&alloc[i][j]);
printf("enter max matrix");
for(i=0;i<p;i++)                             /*reading the maximum matrix and availale
                                                                          matrix*/
   for(j=0;j<r;j++)
     scanf("%d",&max[i][j]);
printf("enter available matrix");
for(i=0;i<r;i++)
  scanf("%d",&avail[i]);
for(i=0;i<p;i++)
  for(j=0;j<r;j++)
            need[i][j]=max[i][j]-alloc[i][j];
fun(); /*calling function*/
if(flag==0)
{
     if(finish[i]!=1)
     {
           printf("\n\n Failing :Mutual exclusion");
for(j=0;j<r;j++)
{ /*checking for mutual exclusion*/
     if(avail[j]<need[i][j])
          avail[j]=need[i][j];
}
fun();
printf("\n By allocating required resources to process %d dead lock is prevented" ,i);
printf("\n\n lack of no preemption");
for(j=0;j<r;j++)
{
          if(avail[j]<need[i][j])
                avail[j]=need[i][j];
          alloc[i][j]=0;
}
fun( );
printf("\n\n dead lock is prevented by allocating needed resources");
printf(" \n \n failing:Hold and Wait condition ");
for(j=0;j<r;j++)
{                          /*checking hold and wait condition*/
           if(avail[j]<need[i][j])
               avail[j]=need[i][j];
}
fun( );
printf("\n AVOIDING ANY ONE OF THE CONDITION, U CAN PREVEMT DEADLOCK");
}
}
getch( );
}
fun( )
{
   while(1)
   {
       for(flag=0,i=0;i<p;i++)
       {
            if(finish[i]==0)
            {
      	for(j=0;j<r;j++)
	{
	 if(need[i][j]<=avail[j])
		continue;
	 else
		break;
                         }
                   if(j==r)
                   {
                        for(j=0;j<r;j++)
 		avail[j]+=alloc[i][j];
	  flag=1;
	  finish[i]=1;
	}
                 }
           }
           if(flag==0)
               break;
          }
}
 
6. Simulate the following page replacement algorithms.
a) FIFO 
b) LRU 
c) LFU 
d) MFU


a)	FIFO 
#include<stdio.h> 
main() 
{  
int i, j, k, f, pf=0, count=0, rs[25], m[10], n;    
printf("\n Enter the length of reference string -- ");  
scanf("%d",&n);  
printf("\n Enter the reference string -- ");  
for(i=0;i<n;i++)   
scanf("%d",&rs[i]);  
printf("\n Enter no. of frames -- ");  
scanf("%d",&f);  
for(i=0;i<f;i++)   
m[i]=-1; 
printf("\n The Page Replacement Process is -- \n");  
for(i=0;i<n;i++)  
{   
for(k=0;k<f;k++)   
{    
if(m[k]==rs[i])     
break;   
}   
if(k==f)  
{    
m[count++]=rs[i];   
pf++;   
}   
for(j=0;j<f;j++)    
printf("\t%d",m[j]);   
if(k==f)    
printf("\tPF No. %d",pf);   
printf("\n");   
if(count==f)    
count=0;  
  }  
printf("\n The number of Page Faults using FIFO are %d",pf);  
}



 

b)	LRU 
#include<stdio.h>
main()
{
int i, j , k, min, rs[25], m[10], count[10], flag[25], n, f, pf=0, next=1;
printf("Enter the length of reference string --  ");
scanf("%d",&n);
printf("Enter the reference string -- ");
for(i=0;i<n;i++)
{
scanf("%d",&rs[i]);
flag[i]=0;
}
printf("Enter the number of frames --  ");
scanf("%d",&f);
for(i=0;i<f;i++)
{
count[i]=0;
m[i]=-1;
}
printf("\nThe Page Replacement process is -- \n");
for(i=0;i<n;i++)
{
for(j=0;j<f;j++)
{
if(m[j]==rs[i])
{
flag[i]=1;
count[j]=next;
next++;
}
}
if(flag[i]==0)
{
if(i<f)
{
m[i]=rs[i];
count[i]=next;
next++;
}
else
{
min=0;
for(j=1;j<f;j++)
if(count[min] > count[j])
min=j;
m[min]=rs[i];
count[min]=next;
next++;
}
pf++;
}
for(j=0;j<f;j++)
printf("%d\t", m[j]);
if(flag[i]==0)
printf("PF No. -- %d" , pf);
printf("\n");
}
printf("\nThe number of page faults using LRU are %d",pf);
}



 


C)LFU
#include<stdio.h>
int main()
{
        int rs[30],st[10],ru[10],place_rank[10],n,f,i,j,k,pf=0,min=0,ind,count=0;
        printf("enter no of references:");
        scanf("%d",&n);
        printf("enter  reference string:");
        for(i=0;i<n;i++)
        {
         scanf("%d",&rs[i]);
        }
        printf("enter no of frames:");
        scanf("%d",&f);
        for(j=0;j<f;j++)
        {
                st[j]=-1;
                ru[j]=0;
                place_rank[j]=0;
        }
        printf("page replacement process:\n");
        for(i=0;i<n;i++)
        {
                for(k=0;k<f;k++)
                {
                        if(st[k]==rs[i])
                        {
                                ru[k]++;
                                break;
                        }
                }
                if(k==f)
                {
                        min=0;
                        for(k=0;k<f;k++)
                                if(ru[k]<ru[min])
                                        min=k;
                        for(j=0;j<f;j++)
                        {
                                 if(ru[j]==ru[min] && place_rank[j]<place_rank[min])    
                                        {
                                          min=j;
                                        }
                                   }

                        st[min]=rs[i];
                        place_rank[min]=++count;
                        ru[min]=1;
                        pf++;
                }
                for(j=0;j<f;j++)
                        printf("\t%d\t",st[j]);
                if(k==f)
                        printf("PF no.%d",pf);
                printf("\n");

        }
        printf("no of page faults:%d",pf);
}



	
 	
	
	
c)	MFU
#include<stdio.h>
#include<stdlib.h>


void main()
{

int hit=0,miss=0,i,j,noPages,noFrames,min;
int frames[10],pages[20];
int flag=0,flag1=0,flag2=0;
int flagFound=0;
int count=0;
int frameAge[50],frameFREQ[50];

printf("enter number of frames\n");
scanf("%d",&noFrames);
printf("enter number of pages\n");
scanf("%d",&noPages);

printf("enter the page string ");

for(i=0;i<noPages;i++)
{
	scanf("%d",&pages[i]);
}


for(i=0;i<noFrames;i++)
{
	frames[i]=-1;
	frameAge[i]=-1;
}

 for(j=0;j<noFrames;j++)
   frameFREQ[j]=0;


for(j=0;j<noPages;j++)
{
 int index;
	printf(" page:%d   ",pages[j] );
	flagFound=0,flag=0,flag2=0;

         for(i=0;i<noFrames;i++)
         {
         	if(frames[i]==pages[j])
	         	{
	         		flagFound=1;
	         		flag=1;
	              index=i;
	         printf("hit ");

	             	hit++;

	         	break;
	            }
         }


          if(flagFound==0)          //if frame not found and empty frame avalible
           {
               for(i=0;i<noFrames;i++)
               {
                if(frames[i]==-1)
                {
                frames[i]=pages[j];
                flag=1;
                count++;
                frameAge[i]=count;

                miss++;
                frameFREQ[i]=1;
                  printf("miss ");
                break;
                }  }

              if(flag==0)
              {
                    int bestmfu=0;
                for(i=0;i<noFrames;i++)
                {
                 if(frameFREQ[i]>frameFREQ[bestmfu])
                    bestmfu=i;
                }
                frames[bestmfu]=pages[j];
                miss++;
               printf("miss ");
                frameFREQ[bestmfu]=1;
              }


          }  //FLAG FOUND ends
          else
          {
                      frameFREQ[index]++;

          }

  for(i=0;i<noFrames;i++)
  {
  	printf("   %d ",frames[i] );
  }
printf("\n");

}

printf("number of hits %d\n",hit );
printf("number of miss %d\n",miss );

}	
 	
